// Generated by CoffeeScript 1.10.0
(function() {
  var Locale, fn, fs, is_node, locales;

  fn = function(key, active, subparams) {
    var res;
    if (active == null) {
      active = 'en';
    }
    res = locales[active][key];
    if (!subparams) {
      return res;
    }
    return res.replace(/\\?\{([^{}]+)\}/g, function(match, name) {
      if (match.charAt(0) === '\\') {
        return match.slice(1);
      }
      if (subparams[name]) {
        return subparams[name];
      }
      return '';
    });
  };

  locales = {};

  is_node = !this.o;

  if (is_node) {
    fs = require('fs');
  }

  (typeof exports !== "undefined" && exports !== null ? exports : this.o).Locale = Locale = {
    config: function(config) {
      ['en', 'lv', 'ru', 'lg'].forEach(function(language) {
        if (!is_node) {
          if (this.o["Locale" + language]) {
            locales[language] = this.o["Locale" + language];
          }
        } else {
          if (fs.existsSync("" + config.dirname + language)) {
            return locales[language] = require("" + config.dirname + language)["Locale" + language];
          }
        }
      });
      return this.keys = Object.keys(locales);
    },
    validate: function(lang) {
      var i, l, len, ref;
      if (lang) {
        ref = this.keys;
        for (i = 0, len = ref.length; i < len; i++) {
          l = ref[i];
          if (l === lang.substr(0, l.length)) {
            return l;
          }
        }
      }
      return this.keys[0];
    }
  };

  if (is_node) {
    exports._ = fn;
  } else {
    (function(_this) {
      return (function() {
        Locale.config();
        App.lang = (function() {
          var i, j, lang, len, len1, param, ref, ref1;
          ref = Locale.keys;
          for (i = 0, len = ref.length; i < len; i++) {
            lang = ref[i];
            ref1 = ['lang', 'language'];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              param = ref1[j];
              if (window.location.href.indexOf(param + "=" + lang) >= 0) {
                return lang;
              }
            }
          }
          return Locale.keys[0];
        })();
        return _this._l = function(key, subparams) {
          return fn(key, App.lang, subparams);
        };
      });
    })(this)();
  }

}).call(this);
