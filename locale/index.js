// Generated by CoffeeScript 2.3.2
(function() {
  var Locale, fn, fs, is_node, locales, locales_keys;

  fn = function(key, active = 'en', subparams) {
    var res;
    res = locales[active][key];
    if (!subparams) {
      return res;
    }
    return res.replace(/\\?\{([^{}]+)\}/g, function(match, name) {
      if (match.charAt(0) === '\\') {
        return match.slice(1);
      }
      if (subparams[name]) {
        return subparams[name];
      }
      return '';
    });
  };

  locales = {};

  is_node = !this.o;

  if (is_node) {
    fs = require('fs');
  }

  locales_keys = [];

  (typeof exports !== "undefined" && exports !== null ? exports : this.o).Locale = Locale = {
    config: function(config) {
      ['en', 'lv', 'ru', 'lg'].forEach(function(language) {
        if (!is_node) {
          if (this.o[`Locale${language}`]) {
            locales[language] = this.o[`Locale${language}`];
          }
        } else {
          if (fs.existsSync(`${config.dirname}${language}.coffee`)) {
            return locales[language] = require(`${config.dirname}${language}`)[`Locale${language}`];
          }
        }
      });
      locales_keys = Object.keys(locales);
      return this.available = locales_keys.map((k) => {
        return [k, locales[k]['Language']];
      });
    },
    validate: function(lang) {
      var i, l, len;
      if (lang) {
        for (i = 0, len = locales_keys.length; i < len; i++) {
          l = locales_keys[i];
          if (l === lang.substr(0, l.length)) {
            return l;
          }
        }
      }
      return locales_keys[0];
    }
  };

  if (is_node) {
    exports._ = fn;
  } else {
    (() => {
      Locale.config();
      App.lang = (function() {
        var i, j, lang, len, len1, param, ref;
        for (i = 0, len = locales_keys.length; i < len; i++) {
          lang = locales_keys[i];
          ref = ['lang', 'language'];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            param = ref[j];
            if (window.location.href.indexOf(`${param}=${lang}`) >= 0) {
              return lang;
            }
          }
        }
        return locales_keys[0];
      })();
      return this._l = function(key, subparams) {
        return fn(key, App.lang, subparams);
      };
    })();
  }

}).call(this);
