// Generated by CoffeeScript 2.5.1
(function() {
  var Cordova, PopupCode;

  PopupCode = window.o.PlatformOffline.prototype.PopupCode;

  window.o.PlatformCordova = Cordova = (function() {
    var PopupCodeCordova;

    class Cordova extends window.o.PlatformOffline {
      _version_error() {
        return this.router.message({
          body: _l('Authorize.version error cordova'),
          actions: [
            {
              event: 'open',
              stay: true,
              body: _l('Authorize.button.open')
            }
          ]
        }).bind('open', () => {
          if (window.cordova && window.cordova.InAppBrowser) {
            window.cordova.InAppBrowser.open(App.config[this.options.platform].market, '_system');
            return;
          }
          return window.open(App.config[this.options.platform].market, '_system');
        });
      }

      _popup_open(url, callback) {
        var open_default, open_safari;
        open_safari = (url, callback) => {
          if (!window.SafariViewController) {
            return callback(false);
          }
          return window.SafariViewController.isAvailable((available) => {
            if (!available) {
              return callback(false);
            }
            window.SafariViewController.show({url});
            return callback(true);
          });
        };
        open_default = (url, callback) => {
          if (!(window.cordova && window.cordova.InAppBrowser)) {
            return callback(false);
          }
          this._popup_instance = window.cordova.InAppBrowser.open(url, '_system');
          // @_popup_instance.addEventListener 'loadstart', (event)=>
          //   if event.url.substr(-5) is 'close'
          //     @_popup_close()
          return callback(true);
        };
        return open_safari(url, (success) => {
          if (!success) {
            return open_default(url, callback);
          }
          return callback(success);
        });
      }

      _popup_close() {
        if (window.SafariViewController) {
          window.SafariViewController.hide();
        }
        if (this._popup_instance) {
          this._popup_instance.close();
          return this._popup_instance = null;
        }
      }

      auth_popup_device() {
        var link;
        link = super.auth_popup_device(...arguments);
        this._popup_open(link);
        return link;
      }

      success_login() {
        super.success_login(...arguments);
        return this._popup_close();
      }

    };

    Cordova.prototype.PopupCode = PopupCodeCordova = (function() {
      class PopupCodeCordova extends PopupCode {};

      PopupCodeCordova.prototype.events = Object.assign({}, PopupCode.prototype.events, {
        'click [data-authorize]': function(e) {
          return this._popup_open($(e.target).attr('href'), function(success) {
            if (success) {
              return e.preventDefault();
            }
          });
        }
      });

      return PopupCodeCordova;

    }).call(this);

    Cordova.prototype._name = 'cordova';

    return Cordova;

  }).call(this);

}).call(this);
