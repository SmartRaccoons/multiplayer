// Generated by CoffeeScript 2.7.0
(function() {
  var Cordova, PopupCode;

  PopupCode = window.o.PlatformOffline.prototype.PopupCode;

  window.o.PlatformCordova = Cordova = (function() {
    var PopupCodeCordova;

    class Cordova extends window.o.PlatformOffline {
      _version_error() {
        return this.router.message({
          body: _l('Authorize.version error cordova'),
          actions: [
            {
              event: 'open',
              stay: true,
              body: _l('Authorize.button.open')
            }
          ]
        }).bind('open', () => {
          if (window.cordova && window.cordova.InAppBrowser) {
            window.cordova.InAppBrowser.open(App.config[this.options.platform].market, '_system');
            return;
          }
          return window.open(App.config[this.options.platform].market, '_system');
        });
      }

      _popup_open(url, callback = function() {}) {
        var open_default, open_safari;
        open_safari = (url, callback_safari) => {
          if (!(window.SafariViewController && this.options.platform === 'ios')) {
            return callback_safari(false);
          }
          return window.SafariViewController.isAvailable((available) => {
            if (!available) {
              return callback_safari(false);
            }
            window.SafariViewController.show({url});
            return callback_safari(true);
          });
        };
        open_default = (url, callback_default) => {
          if (!(window.cordova && window.cordova.InAppBrowser)) {
            return callback_default(false);
          }
          window.cordova.InAppBrowser.open(url, '_system');
          return callback_default(true);
        };
        return open_safari(url, (success) => {
          if (!success) {
            return open_default(url, callback);
          }
          return callback(success);
        });
      }

      _popup_close() {
        if (window.SafariViewController) {
          return window.SafariViewController.hide();
        }
      }

      __local_link(link) {
        return link + (this.options.app_protocol ? `?re=${this.options.app_protocol}` : '');
      }

      auth_popup_device() {
        var link;
        link = super.auth_popup_device(...arguments);
        this._popup_open(this.__local_link(link));
        return link;
      }

      success_login() {
        super.success_login(...arguments);
        return this._popup_close();
      }

    };

    Cordova.prototype.PopupCode = PopupCodeCordova = (function() {
      class PopupCodeCordova extends PopupCode {};

      PopupCodeCordova.prototype.events = Object.assign({}, PopupCode.prototype.events, {
        'click [data-authorize]': function(e) {
          return this.parent._popup_open(this.parent.__local_link($(e.target).attr('href')), function(success) {
            if (success) {
              return e.preventDefault();
            }
          });
        }
      });

      return PopupCodeCordova;

    }).call(this);

    Cordova.prototype._name = 'cordova';

    return Cordova;

  }).call(this);

}).call(this);
