// Generated by CoffeeScript 1.10.0
(function() {
  var Standalone;

  window.o.PlatformStandalone = Standalone = (function() {
    Standalone.prototype._authorize = {
      draugiem: 'dr_auth_code',
      facebook: 'access_token',
      google: 'code'
    };

    function Standalone(options) {
      var fn;
      this.options = options;
      this.router = new window.o.Router();
      this.router.$el.appendTo('body');
      fn = (function(_this) {
        return function(event, data) {
          if (event === 'authenticate:error') {
            _this.router.message(_l('standalone login error')).bind('login', function() {
              return _this.auth_popup();
            });
          }
          if (event === 'authenticate:success') {
            return _this.router.unbind('request', fn);
          }
        };
      })(this);
      this.router.bind('request', fn);
      this.router.bind('connect', (function(_this) {
        return function() {
          if (!_this.auth()) {
            return _this.auth_popup();
          }
        };
      })(this));
      this.router.bind('logout', (function(_this) {
        return function() {
          _this._auth_clear();
          return window.location.reload(true);
        };
      })(this));
    }

    Standalone.prototype.connect = function() {
      return window.o.Connector({
        router: this.router,
        address: '',
        version: document.body.getAttribute('data-version'),
        version_callback: (function(_this) {
          return function() {
            return _this.router.message(_l('version error'));
          };
        })(this)
      });
    };

    Standalone.prototype.auth_send = function(p) {
      return this.router.send('authenticate:try', p);
    };

    Standalone.prototype.auth_popup = function() {
      var authorize;
      authorize = this.router.subview_append(new window.o.ViewPopupAuthorize({
        platforms: Object.keys(App.config.login)
      }));
      authorize.bind('authorize', function(platform) {
        return window.location.href = App.config.login[platform];
      });
      return authorize.render().$el.appendTo(this.router.$el);
    };

    Standalone.prototype._auth_clear = function() {
      return Object.keys(App.config.login).forEach(function(c) {
        return Cookies.set(c, '');
      });
    };

    Standalone.prototype.auth = function() {
      var argument, i, j, len, len1, params, platform, ref, ref1;
      params = {};
      ref = Object.keys(App.config.login);
      for (i = 0, len = ref.length; i < len; i++) {
        platform = ref[i];
        argument = this._authorize[platform];
        if (this.router._get(argument)) {
          params[platform] = this.router._get(argument);
          this._auth_clear();
          Cookies.set(platform, params[platform]);
          window.history.replaceState({}, document.title, window.location.pathname);
          this.auth_send(params);
          return true;
        }
      }
      params = {};
      ref1 = Object.keys(App.config.login);
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        platform = ref1[j];
        if (Cookies.get(platform)) {
          params[platform] = Cookies.get(platform);
          this.auth_send(params);
          return true;
        }
      }
      return false;
    };

    return Standalone;

  })();

}).call(this);
