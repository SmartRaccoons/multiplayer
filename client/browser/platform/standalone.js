// Generated by CoffeeScript 2.3.2
(function() {
  var Standalone;

  window.o.PlatformStandalone = Standalone = (function() {
    class Standalone extends window.o.PlatformCommon {
      constructor(options) {
        var fn;
        super();
        this.options = options;
        this.router = new window.o.Router();
        this.router.$el.appendTo('body');
        fn = (event, data) => {
          if (event === 'authenticate:error') {
            this.router.message(_l('standalone login error')).bind('login', () => {
              return this.auth_popup();
            });
          }
          if (event === 'authenticate:success') {
            return this.router.unbind('request', fn);
          }
        };
        this.router.bind('request', fn);
        this.router.bind('connect', () => {
          if (!this.auth()) {
            if (!this.options.language_check) {
              return this.auth_popup();
            }
            return this.language_check(() => {
              return this.auth_popup();
            });
          }
        });
        this.router.bind('logout', () => {
          this._auth_clear();
          return window.location.reload(true);
        });
      }

      auth_popup() {
        var authorize;
        authorize = this.router.subview_append(new window.o.ViewPopupAuthorize({
          platforms: Object.keys(App.config.login)
        }));
        authorize.bind('authorize', function(platform) {
          return window.location.href = App.config.login[platform];
        });
        return authorize.render().$el.appendTo(this.router.$el);
      }

      _auth_clear() {
        return Object.keys(App.config.login).forEach(function(c) {
          return Cookies.set(c, '');
        });
      }

      auth() {
        var argument, i, j, len, len1, params, platform, ref, ref1;
        params = {};
        ref = Object.keys(App.config.login);
        for (i = 0, len = ref.length; i < len; i++) {
          platform = ref[i];
          argument = this._authorize[platform];
          if (this.router._get(argument)) {
            params[platform] = this.router._get(argument);
            this._auth_clear();
            Cookies.set(platform, params[platform]);
            window.history.replaceState({}, document.title, window.location.pathname);
            this.auth_send(params);
            return true;
          }
        }
        params = {};
        ref1 = Object.keys(App.config.login);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          platform = ref1[j];
          if (Cookies.get(platform)) {
            params[platform] = Cookies.get(platform);
            this.auth_send(params);
            return true;
          }
        }
        return false;
      }

    };

    Standalone.prototype._authorize = {
      draugiem: 'dr_auth_code',
      facebook: 'access_token',
      google: 'code'
    };

    return Standalone;

  }).call(this);

}).call(this);
