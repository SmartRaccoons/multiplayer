// Generated by CoffeeScript 2.5.1
(function() {
  var Facebook,
    indexOf = [].indexOf;

  window.o.PlatformFacebook = Facebook = (function() {
    class Facebook extends window.o.PlatformCommon {
      constructor(options) {
        var fn;
        super(...arguments);
        this.options = options;
        fn = (event, data) => {
          if (event === 'authenticate:error') {
            this.auth_error();
          }
          if (event === 'authenticate:success') {
            return this.router.unbind('request', fn);
          }
        };
        this.router.bind('request', fn);
        this.router.bind('connect', () => {
          return window.FB.getLoginStatus(((response) => {
            return this._auth_callback(response, this.auth.bind(this));
          }), {
            scope: this._scope
          });
        });
        this.router.bind(`request:buy:${this._name}`, ({service, id}) => {
          var subscription;
          subscription = App.config.buy.subscription && indexOf.call(Object.keys(App.config.buy.subscription), service) >= 0;
          return window.FB.ui({
            method: 'pay',
            action: subscription ? 'create_subscription' : 'purchaseitem',
            product: `${App.config.server}/d/og/service-${service}-${App.lang}.html`,
            request_id: id
          }, function() {});
        });
        // {subscription_id: 348322315297870, status: "active"}
        this;
      }

      subscription_action({action, subscription_id}) {
        // action: 'reactivate_subscription', 'cancel_subscription', 'modify_subscription'
        return window.FB.ui({
          method: 'pay',
          action,
          subscription_id
        }, function() {});
      }

      init(callback) {
        $('<script>').attr({
          'src': '//connect.facebook.net/en_US/sdk.js',
          'id': 'facebook-jssdk'
        }).appendTo(document.body);
        return window.fbAsyncInit = () => {
          window.FB.init({
            appId: this.options.facebook_id,
            xfbml: true,
            version: 'v2.5'
          });
          return callback();
        };
      }

      share(params = {}, callback = function() {}) {
        return window.FB.ui({
          method: 'share',
          href: params.href
        }, (response) => {
          if (response && response.error_code) {
            return callback(response.error_code);
          }
          return callback();
        });
      }

      _auth_callback(response, callback = this.auth_error.bind(this)) {
        if (response.status === 'connected') {
          return this.auth_send({
            facebook: response.authResponse.accessToken
          });
        }
        return callback();
      }

      auth() {
        return window.FB.login(((response) => {
          return this._auth_callback(response);
        }), {
          scope: this._scope
        });
      }

      auth_error() {
        return this.router.message({
          body: _l('Authorize.standalone login error'),
          actions: [
            {
              'reload': _l('Authorize.button.reload')
            },
            {
              'login': _l('Authorize.button.login')
            }
          ]
        }).bind('login', () => {
          return this.auth();
        });
      }

    };

    Facebook.prototype._name = 'facebook';

    Facebook.prototype._scope = '';

    return Facebook;

  }).call(this);

}).call(this);
