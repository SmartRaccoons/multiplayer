// Generated by CoffeeScript 2.7.0
(function() {
  var CoinsBonus, CoinsBonusTimed;

  this.o.ViewCoinsBonus = CoinsBonus = (function() {
    class CoinsBonus extends this.o.View {
      _get_button() {
        return _l(`coinsbonus.${this.type}.get`, {
          coins: this.options.coins
        });
      }

      get() {
        return this.trigger('get');
      }

    };

    CoinsBonus.prototype.className = 'coins-bonus';

    CoinsBonus.prototype.template = `<span> &=left </span>`;

    CoinsBonus.prototype.options_default = {
      left: null
    };

    CoinsBonus.prototype.options_html = {
      left: function(v) {
        if (v === null) {
          return '';
        }
        if (v === 0) {
          return this._get_button();
        }
      }
    };

    CoinsBonus.prototype.events = {
      'click button': 'get'
    };

    return CoinsBonus;

  }).call(this);

  this.o.ViewCoinsBonusTimed = CoinsBonusTimed = (function() {
    class CoinsBonusTimed extends CoinsBonus {
      remove() {
        clearTimeout(this._left_timeout);
        return super.remove(...arguments);
      }

    };

    CoinsBonusTimed.prototype.template = `<span> &=left_updated </span>`;

    CoinsBonusTimed.prototype.options_html = {
      left_updated: function(v) {
        if (v && v > 0) {
          return _l(`coinsbonus.${this.type}.wait`, {
            time: [60 * 60, 60, 1].map((seconds) => {
              var units;
              if (seconds === 1) {
                return v;
              }
              units = Math.floor(v / seconds);
              v = v - units * seconds;
              return units;
            }).map(function(v) {
              if (v < 10) {
                return `0${v}`;
              } else {
                return v;
              }
            }).join(':')
          });
        }
        return CoinsBonus.prototype.options_html['left'].apply(this, [v]);
      }
    };

    CoinsBonusTimed.prototype.options_bind = {
      left: function(prev) {
        var update;
        if (!this._start_timer || (this.options.left !== prev.left)) {
          this._start_timer = new Date();
        }
        clearTimeout(this._left_timeout);
        if (this.options.left === null || this.options.left === 0) {
          return this.options_update({
            left_updated: this.options.left
          });
        }
        update = () => {
          var left_updated;
          left_updated = this.options.left - Math.round((new Date().getTime() - this._start_timer.getTime()) / 1000);
          if (left_updated < 0) {
            left_updated = 0;
          }
          this.options_update({left_updated});
          if (left_updated > 0) {
            return this._left_timeout = setTimeout(update, 1000);
          }
        };
        return update();
      }
    };

    return CoinsBonusTimed;

  }).call(this);

}).call(this);
