// Generated by CoffeeScript 1.10.0
(function() {
  var View, view_id,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  view_id = 0;

  this.o.View = View = (function(superClass) {
    extend(View, superClass);

    View.prototype.className = null;

    View.prototype.el = 'div';

    View.prototype.template = '';

    View.prototype.events = {};

    function View(options) {
      var k, m, ref, v;
      this.options = _.extend({}, this.options_default, options);
      view_id++;
      this._id = view_id;
      this.$el = $("<" + this.el + ">");
      if (this.className) {
        this.$el.addClass(this.className);
      }
      if (this.events) {
        ref = this.events;
        for (k in ref) {
          v = ref[k];
          m = k.match(/^(\S+)\s*(.*)$/);
          this.$el.on(m[1] + '.delegateEvents' + this._id, m[2], _.bind(v, this));
        }
      }
      this;
    }

    View.prototype.render = function(data) {
      if (data == null) {
        data = {};
      }
      if (this.template) {
        data.self = this;
        this.$el.html(_.template(this.template)(data));
      }
      return this;
    };

    View.prototype.subview_append = function(view, events) {
      if (events == null) {
        events = [];
      }
      if (!this.__subview) {
        this.__subview = [];
      }
      this.__subview.push(view);
      this.subview_events_pass(events, view, this);
      return view;
    };

    View.prototype.subview_events_pass = function(events, view, parent) {
      if (parent == null) {
        parent = this;
      }
      return events.forEach((function(_this) {
        return function(ev) {
          return view.bind(ev, function() {
            return parent.trigger(ev, arguments[0]);
          });
        };
      })(this));
    };

    View.prototype.subview_remove = function() {
      var results, view;
      if (this.__subview) {
        results = [];
        while (view = this.__subview.shift()) {
          results.push(view.remove());
        }
        return results;
      }
    };

    View.prototype.remove = function() {
      this.subview_remove();
      View.__super__.remove.apply(this, arguments);
      this.$el.off('.delegateEvents' + this._id);
      return this.$el.remove();
    };

    View.prototype.$ = function(selector) {
      return this.$el.find(selector);
    };

    return View;

  })(SimpleEvent);

}).call(this);
